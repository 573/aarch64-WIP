on: [push]

jobs:
  aarch64_job:
    runs-on: ubuntu-latest
    name: Build on aarch64 
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: cachix/install-nix-action@v10
      - run: |
         ARCH=$1
         DISTRO=$2
         COMMANDS=$3
         COMMANDS="${COMMANDS//[$'\t\r\n']+/;}" #Replace newline with ;
         ADDITIONAL_ARGS=$4
         DEBIAN_FRONTEND=noninteractive
         # Install support for new archs via qemu
         # Platforms: linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6
         sudo apt-get update -q -y && sudo apt-get install -q -y qemu qemu-system-arm qemu-efi binfmt-support qemu-user-static
         mkdir -p ~/.config/nix
         echo system-features = aarch64-linux arm-linux >> ~/.config/nix/nix.conf
      - uses: cachix/cachix-action@v6
        with:
          name: 573-bc
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          # Only needed for private caches
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      # This gets everything from cache, but doesn't build neuron (yet).
      - name: nix-store-version
        id: runcmd
        run: |
          $(readlink $(type -f nix-store)) --version
          echo ::set-output name=storeversion::$($(readlink $(type -f nix-store)) --version)
          nix-build "<nixpkgs>" -A pkgs.hello --argstr system aarch64-linux
          hello -g "This is $(uname -r)"
          nix-build "<nixpkgs>" -A pkgsCross.aarch64-multiplatform.hello
          hello -g "This is $(uname -r)"
      - name: Get the output
        run: |
            echo "The nix-store-version output was ${{ steps.runcmd.outputs.storeversion }}"
